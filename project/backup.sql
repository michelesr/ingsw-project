PRAGMA foreign_keys=OFF;
BEGIN TRANSACTION;
CREATE TABLE `ApiKey` (`user_id` INTEGER NOT NULL, `key` VARCHAR UNIQUE NOT NULL, `id` INTEGER PRIMARY KEY NOT NULL, FOREIGN KEY(`user_id`) REFERENCES `User`(`id`) ON DELETE RESTRICT ON UPDATE CASCADE);
INSERT INTO "ApiKey" VALUES(1,'8A307DF4275913B1636E45C00F3A575A',1);
CREATE TABLE `User` (`email` VARCHAR UNIQUE NOT NULL, `password` VARCHAR NOT NULL, `first_name` VARCHAR NOT NULL, `last_name` VARCHAR NOT NULL, `type` INTEGER, `id` INTEGER PRIMARY KEY NOT NULL);
INSERT INTO "User" VALUES('admin@example.org','admin','admin','admin',1,1);
INSERT INTO "User" VALUES('mikezorzino@gmail.com','dfrerereefioerueo','boia','ciao',0,2);
INSERT INTO "User" VALUES('mikezerorzino@gmail.com','dfrefeihfeirereefioerueo','boia','ciao',1,3);
INSERT INTO "User" VALUES('iosonounadmin@example.org','eiori35893','iosonoun','admin',1,4);
INSERT INTO "User" VALUES('anotheradmin@example.org','4590490ek','another','admin',1,5);
INSERT INTO "User" VALUES('iamsupplier@example.org','weruignuier390583904DFJIE','iam','supplier',0,6);
INSERT INTO "User" VALUES('iamanothersupplier@example.org','weruixxxxxuIEr390583904DFJIE','iam','anothersupplier',0,7);
CREATE TABLE `Admin` (`user_id` INTEGER NOT NULL, `id` INTEGER PRIMARY KEY NOT NULL, FOREIGN KEY(`user_id`) REFERENCES `User`(`id`) ON DELETE RESTRICT ON UPDATE CASCADE);
INSERT INTO "Admin" VALUES(1,1);
INSERT INTO "Admin" VALUES(3,2);
INSERT INTO "Admin" VALUES(4,3);
INSERT INTO "Admin" VALUES(5,4);
CREATE TABLE `Supplier` (`vat` VARCHAR NOT NULL, `supplier_name` VARCHAR NOT NULL, `city` INTEGER NOT NULL, `user_id` INTEGER NOT NULL, `id` INTEGER PRIMARY KEY NOT NULL, FOREIGN KEY(`city`) REFERENCES `City`(`id`) ON DELETE RESTRICT ON UPDATE CASCADE, FOREIGN KEY(`user_id`) REFERENCES `User`(`id`) ON DELETE RESTRICT ON UPDATE CASCADE);
INSERT INTO "Supplier" VALUES('59068590fjkegj','diavlacc',1,2,1);
INSERT INTO "Supplier" VALUES('45894IOOIDJIIOWJIO','iamsupplier',3,6,2);
INSERT INTO "Supplier" VALUES('3494893eoioerieoj','iamanothersupplier',4,7,3);
CREATE TABLE `ProductCategory` (`name` VARCHAR UNIQUE NOT NULL, `id` INTEGER PRIMARY KEY NOT NULL);
INSERT INTO "ProductCategory" VALUES('alimentazione',1);
INSERT INTO "ProductCategory" VALUES('domestici',2);
INSERT INTO "ProductCategory" VALUES('biologico',3);
CREATE TABLE `ProductStock` (`product_id` INTEGER NOT NULL, `price` FLOAT NOT NULL, `min` INTEGER NOT NULL, `max` INTEGER NOT NULL, `availability` INTEGER NOT NULL, `id` INTEGER PRIMARY KEY NOT NULL, FOREIGN KEY(`product_id`) REFERENCES `Product`(`id`) ON DELETE RESTRICT ON UPDATE CASCADE);
INSERT INTO "ProductStock" VALUES(1,250.0,1,20,100,1);
INSERT INTO "ProductStock" VALUES(2,'250,37',2,20,300,2);
CREATE TABLE `Product` (`name` VARCHAR UNIQUE NOT NULL, `supplier_id` INTEGER NOT NULL, `product_category` INTEGER NOT NULL, `id` INTEGER PRIMARY KEY NOT NULL, FOREIGN KEY(`supplier_id`) REFERENCES `Supplier`(`id`) ON DELETE RESTRICT ON UPDATE CASCADE, FOREIGN KEY(`product_category`) REFERENCES `ProductCategory`(`id`) ON DELETE RESTRICT ON UPDATE CASCADE);
INSERT INTO "Product" VALUES('aspirapolvere',3,2,1);
INSERT INTO "Product" VALUES('patate',2,3,2);
CREATE TABLE `City` (`name` VARCHAR UNIQUE NOT NULL, `id` INTEGER PRIMARY KEY NOT NULL);
INSERT INTO "City" VALUES('mondolfo',1);
INSERT INTO "City" VALUES('urbino',2);
INSERT INTO "City" VALUES('fano',3);
INSERT INTO "City" VALUES('senigallia',4);
INSERT INTO "City" VALUES('ancona',5);
INSERT INTO "City" VALUES('fermignano',6);
CREATE TABLE `Session` (`user_id` INTEGER NOT NULL, `start` VARCHAR, `end` VARCHAR, `id` INTEGER PRIMARY KEY NOT NULL, FOREIGN KEY(`user_id`) REFERENCES `User`(`id`) ON DELETE RESTRICT ON UPDATE CASCADE);
INSERT INTO "Session" VALUES(1,'03/09/2014 00:30:00','08/09/2014 19:09:05',1);
INSERT INTO "Session" VALUES(1,'08/09/2014 19:09:05','08/09/2014 19:19:12',2);
INSERT INTO "Session" VALUES(1,'15/09/2014 14:21:51','',3);
CREATE TRIGGER it__ApiKey__user_id BEFORE INSERT ON `ApiKey` FOR EACH ROW BEGIN SELECT RAISE(ROLLBACK, 'FK value "user_id" references null value')  WHERE NEW.`user_id` IS NOT NULL AND ((SELECT `id` FROM `User` WHERE `id`=NEW.`user_id`) IS NULL); END;
CREATE TRIGGER ut__ApiKey__user_id BEFORE UPDATE ON `ApiKey` FOR EACH ROW BEGIN SELECT RAISE(ROLLBACK, 'FK value "user_id" references null value')  WHERE NEW.`user_id` IS NOT NULL AND ((SELECT `id` FROM `User` WHERE `id`=NEW.`user_id`) IS NULL); END;
CREATE TRIGGER it__Supplier__user_id BEFORE INSERT ON `Supplier` FOR EACH ROW BEGIN SELECT RAISE(ROLLBACK, 'FK value "user_id" references null value')  WHERE NEW.`user_id` IS NOT NULL AND ((SELECT `id` FROM `User` WHERE `id`=NEW.`user_id`) IS NULL); END;
CREATE TRIGGER ut__Supplier__user_id BEFORE UPDATE ON `Supplier` FOR EACH ROW BEGIN SELECT RAISE(ROLLBACK, 'FK value "user_id" references null value')  WHERE NEW.`user_id` IS NOT NULL AND ((SELECT `id` FROM `User` WHERE `id`=NEW.`user_id`) IS NULL); END;
CREATE TRIGGER it__Supplier__city BEFORE INSERT ON `Supplier` FOR EACH ROW BEGIN SELECT RAISE(ROLLBACK, 'FK value "city" references null value')  WHERE NEW.`city` IS NOT NULL AND ((SELECT `id` FROM `City` WHERE `id`=NEW.`city`) IS NULL); END;
CREATE TRIGGER ut__Supplier__city BEFORE UPDATE ON `Supplier` FOR EACH ROW BEGIN SELECT RAISE(ROLLBACK, 'FK value "city" references null value')  WHERE NEW.`city` IS NOT NULL AND ((SELECT `id` FROM `City` WHERE `id`=NEW.`city`) IS NULL); END;
CREATE TRIGGER it__Admin__user_id BEFORE INSERT ON `Admin` FOR EACH ROW BEGIN SELECT RAISE(ROLLBACK, 'FK value "user_id" references null value')  WHERE NEW.`user_id` IS NOT NULL AND ((SELECT `id` FROM `User` WHERE `id`=NEW.`user_id`) IS NULL); END;
CREATE TRIGGER ut__Admin__user_id BEFORE UPDATE ON `Admin` FOR EACH ROW BEGIN SELECT RAISE(ROLLBACK, 'FK value "user_id" references null value')  WHERE NEW.`user_id` IS NOT NULL AND ((SELECT `id` FROM `User` WHERE `id`=NEW.`user_id`) IS NULL); END;
CREATE TRIGGER it__Product__supplier_id BEFORE INSERT ON `Product` FOR EACH ROW BEGIN SELECT RAISE(ROLLBACK, 'FK value "supplier_id" references null value')  WHERE NEW.`supplier_id` IS NOT NULL AND ((SELECT `id` FROM `Supplier` WHERE `id`=NEW.`supplier_id`) IS NULL); END;
CREATE TRIGGER ut__Product__supplier_id BEFORE UPDATE ON `Product` FOR EACH ROW BEGIN SELECT RAISE(ROLLBACK, 'FK value "supplier_id" references null value')  WHERE NEW.`supplier_id` IS NOT NULL AND ((SELECT `id` FROM `Supplier` WHERE `id`=NEW.`supplier_id`) IS NULL); END;
CREATE TRIGGER it__Product__product_category BEFORE INSERT ON `Product` FOR EACH ROW BEGIN SELECT RAISE(ROLLBACK, 'FK value "product_category" references null value')  WHERE NEW.`product_category` IS NOT NULL AND ((SELECT `id` FROM `ProductCategory` WHERE `id`=NEW.`product_category`) IS NULL); END;
CREATE TRIGGER ut__Product__product_category BEFORE UPDATE ON `Product` FOR EACH ROW BEGIN SELECT RAISE(ROLLBACK, 'FK value "product_category" references null value')  WHERE NEW.`product_category` IS NOT NULL AND ((SELECT `id` FROM `ProductCategory` WHERE `id`=NEW.`product_category`) IS NULL); END;
CREATE TRIGGER it__Session__user_id BEFORE INSERT ON `Session` FOR EACH ROW BEGIN SELECT RAISE(ROLLBACK, 'FK value "user_id" references null value')  WHERE NEW.`user_id` IS NOT NULL AND ((SELECT `id` FROM `User` WHERE `id`=NEW.`user_id`) IS NULL); END;
CREATE TRIGGER ut__Session__user_id BEFORE UPDATE ON `Session` FOR EACH ROW BEGIN SELECT RAISE(ROLLBACK, 'FK value "user_id" references null value')  WHERE NEW.`user_id` IS NOT NULL AND ((SELECT `id` FROM `User` WHERE `id`=NEW.`user_id`) IS NULL); END;
CREATE TRIGGER it__ProductStock__product_id BEFORE INSERT ON `ProductStock` FOR EACH ROW BEGIN SELECT RAISE(ROLLBACK, 'FK value "product_id" references null value')  WHERE NEW.`product_id` IS NOT NULL AND ((SELECT `id` FROM `Product` WHERE `id`=NEW.`product_id`) IS NULL); END;
CREATE TRIGGER ut__ProductStock__product_id BEFORE UPDATE ON `ProductStock` FOR EACH ROW BEGIN SELECT RAISE(ROLLBACK, 'FK value "product_id" references null value')  WHERE NEW.`product_id` IS NOT NULL AND ((SELECT `id` FROM `Product` WHERE `id`=NEW.`product_id`) IS NULL); END;
COMMIT;
